// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int             @id @default(autoincrement())
  name          String?
  username      String          @unique
  email         String          @unique
  avatarUrl     String
  role          String
  models        Models[]
  favorites     Models[]        @relation("FavoriteModels")
  followers     Users[]         @relation("UserFollows")
  following     Users[]         @relation("UserFollows")
  collections   Collections[]
  courses       Courses[]
  comments      Comments[]
  printRequests PrintRequests[]
}

model Models {
  id           Int             @id @default(autoincrement())
  name         String
  description  String
  grade        Float
  likes        Int
  views        Int
  uploadTime   DateTime
  owner        Users           @relation(fields: [ownerId], references: [id])
  ownerId      Int
  modelItems   ModelItems[]
  favoritedBy  Users[]         @relation("FavoriteModels")
  collection   Collections     @relation(fields: [collectionId], references: [id])
  collectionId Int
  comments     Comments[]
  printRequest PrintRequests[]
}

model ModelItems {
  id            Int    @id @default(autoincrement())
  name          String
  modelUrl      String @unique
  modelParent   Models @relation(fields: [modelParentId], references: [id])
  modelParentId Int
}

model Collections {
  id      Int      @id @default(autoincrement())
  owner   Users    @relation(fields: [ownerId], references: [id])
  ownerId Int
  models  Models[]
}

model Courses {
  id          Int    @id @default(autoincrement())
  name        String @unique
  purchases   Int
  description String
  users       Users? @relation(fields: [usersId], references: [id])
  usersId     Int?
}

model Comments {
  id      Int    @id @default(autoincrement())
  text    String
  likes   Int
  owner   Users  @relation(fields: [ownerId], references: [id])
  ownerId Int
  model   Models @relation(fields: [modelId], references: [id])
  modelId Int
}

enum PrintRequestStatus {
  WAITING
  PROCESSING
  DONE
}

model PrintRequests {
  id        Int                @id @default(autoincrement())
  printDate DateTime
  status    PrintRequestStatus
  user      Users              @relation(fields: [userId], references: [id])
  userId    Int
  model     Models             @relation(fields: [modelId], references: [id])
  modelId   Int
}
